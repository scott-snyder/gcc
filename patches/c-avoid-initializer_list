Bottom: 132dda7606feabf61128b224ff279b31f83f404d
Top:    8a2be25ebc2a74f3787cb4a269e6975a2e3bab8f
Author: scott snyder <sss@karma>
Date:   2023-01-03 13:12:42 -0500

Revert "c++: avoid initializer_list<string> [PR105838]"

This reverts commit d081807d8d70e3e87eae41e1560e54d503f4d465.

See https://gcc.gnu.org/bugzilla/show_bug.cgi?id=108047

When constructing a vector<string> from { "strings" }, first is built an
initializer_list<string>, which is then copied into the strings in the
vector.  But this is inefficient: better would be treat the { "strings" }
as a range and construct the strings in the vector directly from the
string-literals.  We can do this transformation for standard library
classes because we know the design patterns they follow.

	PR c++/105838

gcc/cp/ChangeLog:

	* call.cc (list_ctor_element_type): New.
	(braced_init_element_type): New.
	(has_non_trivial_temporaries): New.
	(maybe_init_list_as_array): New.
	(maybe_init_list_as_range): New.
	(build_user_type_conversion_1): Use maybe_init_list_as_range.
	* parser.cc (cp_parser_braced_list): Call
	recompute_constructor_flags.
	* cp-tree.h (find_temps_r): Declare.

gcc/testsuite/ChangeLog:

	* g++.dg/tree-ssa/initlist-opt1.C: New test.
